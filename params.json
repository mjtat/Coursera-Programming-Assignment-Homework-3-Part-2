{
  "name": "Coursera: R Programming, Homework 3 Question 2",
  "tagline": "",
  "body": "### Introduction\r\n\r\nThis data set is from the John Hopkins University Coursera Course titled: \"R Programming\". The current examples are pulled from **question 2** of **homework assignment 3**. You can find the text (verbatim) for the assignment below:\r\n\r\n_Write a function called best that take two arguments: the 2-character abbreviated name of a state and an_\r\n_outcome name. The function reads the outcome-of-care-measures.csv \fle and returns a character vector_\r\n_with the name of the hospital that has the best (i.e. lowest) 30-day mortality for the speci\fed outcome_\r\n_in that state. The hospital name is the name provided in the Hospital.Name variable. The outcomes can_\r\n_be one of \"heart attack\", \"heart failure\", or \"pneumonia\". Hospitals that do not have data on a particular_\r\n_outcome should be excluded from the set of hospitals when deciding the rankings._\r\n_Handling ties. If there is a tie for the best hospital for a given outcome, then the hospital names should_\r\n_be sorted in alphabetical order and the \frst hospital in that set should be chosen (i.e. if hospitals \"b\", \"c\",_\r\n_and \"f\" are tied for best, then hospital \"b\" should be returned)._\r\n_The function should use the following template._\r\n\r\n    best <- function(state, outcome) {\r\n    ## Read outcome data\r\n    ## Check that state and outcome are valid\r\n    ## Return hospital name in that state with lowest 30-day death\r\n    ## rate\r\n    }\r\n\r\n_The function should check the validity of its arguments. If an invalid state value is passed to best, the_\r\n_function should throw an error via the stop function with the exact message \"invalid state\". If an invalid_\r\n_outcome value is passed to best, the function should throw an error via the stop function with the exact_\r\n_message \"invalid outcome\"._\r\n\r\n_Here is some sample output from the function._\r\n\r\n    > source(\"best.R\")\r\n    \r\n    > best(\"TX\", \"heart attack\")\r\n    [1] \"CYPRESS FAIRBANKS MEDICAL CENTER\"\r\n    \r\n    > best(\"TX\", \"heart failure\")\r\n    [1] \"FORT DUNCAN MEDICAL CENTER\"\r\n    \r\n    > best(\"MD\", \"heart attack\")\r\n    [1] \"JOHNS HOPKINS HOSPITAL, THE\"\r\n    \r\n    > best(\"MD\", \"pneumonia\")\r\n    [1] \"GREATER BALTIMORE MEDICAL CENTER\"\r\n    \r\n    > best(\"BB\", \"heart attack\")\r\n    Error in best(\"BB\", \"heart attack\") : invalid state\r\n    \r\n    > best(\"NY\", \"hert attack\")\r\n    Error in best(\"NY\", \"hert attack\") : invalid outcome\r\n    \r\n\r\n\r\n***\r\n\r\n\r\nThe data file associated with this script can be found here:\r\n\r\n[Coursera R Programming Homework Assignment 3](https://github.com/mjtat/Coursera-Programming-Assignment-Homework-3-Part-2/blob/master/hospital-data.csv)\r\n\r\nThe entire script can be found here: [Best_Hosp.R](https://github.com/mjtat/Coursera-Programming-Assignment-Homework-3-Question-2/blob/master/best_hosp.R)\r\n\r\n## The following code below will accomplish this task.\r\n\r\n\r\n### First read in the data, and do some cleaning and organizing.\r\n\r\n    ## Read in the data\r\n\r\n    outcome_dat<-read.csv(\"outcome-of-care-measures.csv\", header = TRUE, stringsAsFactors = FALSE)\r\n\r\n    ## Select only the key variables from the original data.\r\n    outcome_dat_organized <- data.frame(as.character(outcome_dat$Hospital.Name),as.character(outcome_dat$State), as.double(outcome_dat$Hospital.30.Day.Death..Mortality..Rates.from.Heart.Attack), as.double(outcome_dat$Hospital.30.Day.Death..Mortality..Rates.from.Heart.Failure), as.double(outcome_dat$Hospital.30.Day.Death..Mortality..Rates.from.Pneumonia), stringsAsFactors = FALSE)\r\n\r\n    # Rename the variables\r\n    names(outcome_dat_organized)<-c(\"hospital\", \"state\", \"heart attack\", \"heart failure\", \"pneumonia\")\r\n\r\n    # Remove all the NA values.\r\n    outcome_dat_organized$`heart attack`[outcome_dat_organized$`heart attack` == \"Not Available\"] <- NA\r\n    outcome_dat_organized$`heart failure`[outcome_dat_organized$`heart failure` == \"Not Available\"] <- NA\r\n    outcome_dat_organized$pneumonia[outcome_dat_organized$pneumonia == \"Not Available\"] <- NA\r\n\r\n    outcome_dat_organized <- outcome_dat_organized[complete.cases(outcome_dat_organized),]\r\n    outcome_dat_organized <- droplevels(outcome_dat_organized[complete.cases(outcome_dat_organized),])\r\n\r\n    ## Create a function to search the lowest mortality rate based on state, and the type of death.\r\n\r\n    ## Note, states must be entered as a two letter CAPITALIZED abbreviation surrounded by quotes\r\n    ## e.g., \"CA\", \"WA\", \"MI\"\r\n\r\n    ## Options for the type of death are \"heart attack\", \"heart failure\", and \"pneumonia\". These must\r\n    ## be entered VERBATIM in quotes.\r\n\r\n\r\n### Now, create the `best() ` function. The first section will first evaluate if there are matches to the functions inputs. If there are not, it will kick you out of the function and tell you to enter a valid value.\r\n\r\n    best <- function(location, outcome) {\r\n            \r\n            states <- outcome_dat_organized$state\r\n            \r\n            outcomes <- colnames(outcome_dat_organized)\r\n            \r\n            y <- match(location, states, nomatch = as.numeric(0))\r\n            \r\n            z <- match(outcome, outcomes, nomatch = as.numeric(0))\r\n            \r\n            if (z == 0 && y == 0) {\r\n                    \r\n            print(\"Invalid State and Outcome. Please enter valid values.\") \r\n                    \r\n            } else if (z == 0) {\r\n              \r\n              print(\"Invalid outcome. Please enter a valid outcome\")\r\n              \r\n            } else if (y == 0) {\r\n              \r\n              print(\"Invalid State. Please enter valid State.\")\r\n            \r\n            } else {\r\n            \r\n### The next part of the function essentially searches for the lowest mortality rate by state and outcome. If there is a tie, it chooses the entry that comes first alphabetically. \r\n            \r\n            state_subset <- subset(outcome_dat_organized, location == state)\r\n            \r\n            names(state_subset)<- c(\"hospital\", \"state\", \"heart attack\", \"heart failure\", \"pneumonia\")\r\n            \r\n            state_subset$hospital <- as.character(state_subset$hospital)\r\n            \r\n            outcome <- tolower(outcome)\r\n            \r\n            min <- with(state_subset, state_subset[order(state_subset[[outcome]], state_subset$hospital), ])\r\n\r\n            print(min[1,1]) \r\n           } \r\n    }     \r\n       \r\n\r\n### Finally, test the function a few times. \r\n\r\n    ## Test the function a few times.\r\n    best(\"TX\", \"heart attack\")\r\n    best(\"TX\", \"heart failure\")\r\n    best(\"MD\", \"heart attack\")\r\n    best(\"BB\", \"heart failure\")\r\n    best(\"OH\", \"pneumonia\")\r\n    best(\"ID\", \"heart attack\")\r\n    best(\"AB\", \"cancer\")\r\n\r\n\r\n### Here's what the function should give you when you enter some values.\r\n\r\n    > best(\"TX\", \"heart attack\")\r\n    [1] \"CYPRESS FAIRBANKS MEDICAL CENTER\"\r\n    \r\n    > best(\"TX\", \"heart failure\")\r\n    [1] \"FORT DUNCAN MEDICAL CENTER\"\r\n    \r\n    > best(\"MD\", \"heart attack\")\r\n    [1] \"JOHNS HOPKINS HOSPITAL, THE\"\r\n    \r\n    > best(\"BB\", \"heart failure\")\r\n    [1] \"Invalid State. Please enter valid State.\"\r\n\r\n    > best(\"OH\", \"pneumonia\")\r\n    [1] \"GRANDVIEW HOSPITAL & MEDICAL CENTER\"\r\n \r\n    > best(\"ID\", \"heart attack\")\r\n    [1] \"PORTNEUF MEDICAL CENTER\"\r\n     \r\n    > best(\"AB\", \"cancer\")\r\n    [1] \"Invalid State and Outcome. Please enter valid values.\"\r\n \r\n\r\n   ",
  "note": "Don't delete this file! It's used internally to help with page regeneration."
}